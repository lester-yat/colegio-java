-- Crear la base de datos
CREATE DATABASE dbcolegio;

USE dbcolegio;

-- Crear las tablas profesor, grado, seccion y padre
CREATE TABLE profesor (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre NVARCHAR(50),
    apellido NVARCHAR(50),
    edad INT,
    identificacion NVARCHAR(50),
    tipo_identificacion NVARCHAR(50),
    telefono NVARCHAR(50),
    email NVARCHAR(50),
    genero NVARCHAR(50),
    direccion NVARCHAR(50),
    fecha_nacimiento DATE,
    estado_civil NVARCHAR(50),
    especialidad NVARCHAR(50),
    salario INT,
    fecha_contratacion DATE,
    fecha_terminacion_contrato DATE,
    estado_contrato NVARCHAR(50),
    tipo_contrato NVARCHAR(50)
);

CREATE TABLE grado (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre NVARCHAR(50),
    salon NVARCHAR(50),
    nivel NVARCHAR(50),
    anio DATE,
    jornada NVARCHAR(50),
    cantidad_max_estudiantes INT
);

CREATE TABLE padre (
    id INT IDENTITY(1,1) PRIMARY KEY,
    nombre NVARCHAR(100),
    apellido NVARCHAR(100),
    edad INT,
    identificacion NVARCHAR(50),
    telefono NVARCHAR(20),
    parentesco NVARCHAR(50)
);

CREATE TABLE seccion (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre NVARCHAR(50),
    horario_inicio TIME,
    horario_final TIME,
    grado_id INT,
    FOREIGN KEY (grado_id) REFERENCES grado(id) ON DELETE SET NULL
);

-- Crear la tabla alumno
CREATE TABLE alumno (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre NVARCHAR(50),
    apellido NVARCHAR(50),
    edad INT,
    grado_id INT,
    fecha_registro DATE,
    FOREIGN KEY (grado_id) REFERENCES grado(id) ON DELETE SET NULL
);

-- Crear la tabla inscripcion
CREATE TABLE inscripcion (
    id INT IDENTITY(1,1) PRIMARY KEY,
    alumno_id INT NOT NULL,
    grado_id INT NOT NULL,
    fecha_inscripcion DATE,
    FOREIGN KEY (alumno_id) REFERENCES alumno(id) ON DELETE CASCADE,
    FOREIGN KEY (grado_id) REFERENCES grado(id)
);

ALTER TABLE inscripcion
ADD numero_cuenta NVARCHAR(50),
    monto DECIMAL(10, 2),
    estado NVARCHAR(50);


-- Crear la tabla curso
CREATE TABLE curso (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre NVARCHAR(100) NOT NULL,
    descripcion NVARCHAR(255),
    nivel NVARCHAR(50),
    profesor_id INT,
    grado_id INT,
    seccion_id INT,
    FOREIGN KEY (profesor_id) REFERENCES profesor(id) ON DELETE SET NULL,
    FOREIGN KEY (grado_id) REFERENCES grado(id) ON DELETE SET NULL,
    FOREIGN KEY (seccion_id) REFERENCES seccion(id) ON DELETE SET NULL
);

-- Crear la tabla nota
CREATE TABLE nota (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre NVARCHAR(50),
    calificacion FLOAT,
    fecha_registro DATE,
    alumno_id INT,
    curso_id INT,
    FOREIGN KEY (alumno_id) REFERENCES alumno(id) ON DELETE CASCADE,
    FOREIGN KEY (curso_id) REFERENCES curso(id) ON DELETE CASCADE,
);

-- Crear la tabla profesor_grado
CREATE TABLE profesor_grado (
    profesor_id INT NULL,
    grado_id INT NULL,
    seccion_id INT NULL,
    FOREIGN KEY (profesor_id) REFERENCES profesor(id) ON DELETE SET NULL,
    FOREIGN KEY (grado_id) REFERENCES grado(id) ON DELETE SET NULL,
    FOREIGN KEY (seccion_id) REFERENCES seccion(id) ON DELETE SET NULL
);

-- Crear la tabla alumno_seccion
CREATE TABLE alumno_seccion (
    alumno_id INT NOT NULL,
    seccion_id INT NOT NULL,  -- Cambiado a NOT NULL
    PRIMARY KEY (alumno_id, seccion_id),  -- Clave primaria compuesta
    FOREIGN KEY (alumno_id) REFERENCES alumno(id) ON DELETE CASCADE,
    FOREIGN KEY (seccion_id) REFERENCES seccion(id) ON DELETE CASCADE
);

-- Crear la tabla alumno_padre
CREATE TABLE alumno_padre (
    alumno_id INT NOT NULL,
    padre_id INT NOT NULL,
    PRIMARY KEY (alumno_id, padre_id),
    FOREIGN KEY (alumno_id) REFERENCES alumno(id) ON DELETE CASCADE,
    FOREIGN KEY (padre_id) REFERENCES padre(id) ON DELETE CASCADE
);

-- Crear la tabla de inicio de sesión
CREATE TABLE inicio (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre_usuario NVARCHAR(50) NOT NULL UNIQUE,
    contrasenia NVARCHAR(256) NOT NULL
);

-- Insertar un usuario admin con contraseña encriptada
INSERT INTO inicio (nombre_usuario, contrasenia)
VALUES ('admin', '240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9'); -- Hash SHA-256 de 'admin123'

CREATE TABLE estado_pago (
    id INT PRIMARY KEY IDENTITY(1,1),  -- ID autoincremental
    descripcion VARCHAR(50) NOT NULL   -- Descripción del estado
);

INSERT INTO estado_pago (descripcion) VALUES 
('Pendiente de pago'),
('Pagado'),
('Pagado y cancelado'),
('Cancelado');

CREATE SEQUENCE seq_codigo_transaccion
    START WITH 1  -- Número inicial
    INCREMENT BY 1;    -- Incremento por cada uso

CREATE TABLE pago (
    id INT PRIMARY KEY IDENTITY(1,1),              -- ID autoincremental
    codigo_transaccion INT NOT NULL,               -- Código de la transacción
    tipo_transaccion VARCHAR(50) NOT NULL,         -- Tipo de transacción
    no_cuenta_cliente VARCHAR(50) NULL,            -- Número de cuenta del cliente (puede ser NULL)
    no_cuenta_destino VARCHAR(50) NULL,            -- Número de cuenta destino (puede ser NULL)
    fecha_hora DATETIME NULL,                      -- Fecha y hora de la transacción (puede ser NULL)
    monto DECIMAL(10, 2) NULL,                     -- Monto del pago (puede ser NULL)
    estado_id INT NOT NULL,                        -- Llave foránea hacia la tabla estado_pago,
    CONSTRAINT FK_estado FOREIGN KEY (estado_id) REFERENCES estado_pago(id)
);

ALTER TABLE pago
ADD id_inscripcion INT;


//echo por angel
-- Eliminar la tabla inicio
DROP TABLE inicio;

CREATE TABLE usuario (
    id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    nombre_usuario NVARCHAR(50) NOT NULL UNIQUE,
    contrasenia NVARCHAR(256) NOT NULL,
    rol NVARCHAR(50) NOT NULL,
    profesor_id INT NULL, -- Permite NULL
    alumno_id INT NULL,   -- Permite NULL
    FOREIGN KEY (profesor_id) REFERENCES profesor(id) ON DELETE SET NULL, -- Cambiado a SET NULL
    FOREIGN KEY (alumno_id) REFERENCES alumno(id) ON DELETE SET NULL      -- Cambiado a SET NULL
);


-- Insertar un usuario admin con contraseña encriptada
INSERT INTO usuario (nombre_usuario, contrasenia, rol, profesor_id, alumno_id)
VALUES ('admin', '240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9', 'admin', NULL, NULL);